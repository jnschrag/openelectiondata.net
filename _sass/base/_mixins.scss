/*==============================
=            Mixins            =
==============================*/
// $browser-context: 16; // Default Browser Size
// @mixin font-size($pixels, $context: $browser-context) {
// 	font-size: ($pixels) + px;
//   	font-size: ($pixels/$context) + em;
// }

$browser-context: 16px;
@function calculateRem($size) {
  $remSize: $size / $browser-context;
  @return #{$remSize}rem;
}

@mixin fontSize($size) {
  font-size: $size; //Fallback in px
  font-size: calculateRem($size);
}

// Center block
@mixin center-block {
	display: block;
	margin-left: auto;
	margin-right: auto;
}

// Clearfix
@mixin clearfix() {
	content: "";
	display: table;
	table-layout: fixed;
}

// Clear after (not all clearfix need this also)
@mixin clearfix-after() {
	clear: both;
}

// Breakpoints
$breakpoint-xlarge: 90em;
$breakpoint-large: 64em;
$breakpoint-medium: 48em;
$breakpoint-small: 35em;
$breakpoint-xsmall: 25em;

@mixin breakpoint($break) {
	@if $break == xlarge {
		@media screen and (min-width:$breakpoint-xlarge) { @content; }
	}
	@else if $break == large {
		@media screen and (min-width:$breakpoint-large) { @content; }
	}
	@else if $break == medium {
		@media screen and (min-width: $breakpoint-medium) { @content; }
	}
	@else if $break == small {
		@media screen and (max-width: $breakpoint-small) { @content; }
	}
	@else if $break == xsmall {
		@media screen and (max-width: $breakpoint-xsmall) { @content; }
	}@else {
		@media ($break) { @content; }
	}

}

// Transitions
@mixin transition($args...) {
  -webkit-transition: $args;
  -moz-transition: $args;
  -ms-transition: $args;
  -o-transition: $args;
  transition: $args;
}

// Box Shadow
/* @include box-shadow(1px,1px,1px,0, #fff, true); */
@mixin box-shadow($top, $left, $blur, $size, $color, $inset: false) {
    @if $inset {
        -webkit-box-shadow:inset $top $left $blur $size $color;
        -moz-box-shadow:inset $top $left $blur $size $color;
        box-shadow:inset $top $left $blur $size $color;
    } @else {
        -webkit-box-shadow: $top $left $blur $size $color;
        -moz-box-shadow: $top $left $blur $size $color;
        box-shadow: $top $left $blur $size $color;
    }
}

// Content Width
@mixin max-content($width, $breakpoint: false) {
	@if $breakpoint {
		@include breakpoint($breakpoint) {
			max-width: $width;
			margin-left: auto;
			margin-right: auto;
		}
	} @else {
		max-width: $width;
		margin-left: auto;
		margin-right: auto;
	}
}

// Extend Background to full width of window
@mixin fullWidthBackground ( $background ) {
    &::before,
    &::after {
        content: "";
        display: block;
        position: absolute;
        top: 0;
        width: 100vw;
        height: 100%;
        background-color: $background;
    }

    &::before {
        right: calc(100% - 1px);
    }

    &::after {
        left: calc(100% - 1px);
    }
}

// Box Shadow Link
@mixin box-shadow-link( $color ) {
	@include box-shadow(0,-2px,0,0, $color, true);
}